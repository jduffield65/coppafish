; Default parameters
;
; Do not modify this file!  If you would like to change a value, create a new
; settings.ini file and set only the parameters you would like to be different
; than those found in this file.
;
; For extraction to markdown, we need:
; Require a comment for each section and variable (can be blank though).
; Lines after a header are the comments describing that section.
; Lines before a variable are the comment for that variable.
; Need an empty line between section comment and comment of first variable in that section.
; Separator between variable name and default value is ' = ' i.e. a space on each side.


[file_names]
; The *file_names* section specifies the files that will be used throughout the pipeline.
; Variables in this section can be changed at any point in the pipeline, and the notebook created using it can still
; be loaded in.


; Name of notebook file in output directory will be *notebook_name*.npz
notebook_name = notebook

; Directory where the raw .nd2 files or .npy stacks are
input_dir =

; Directory where notebook is saved
output_dir =

; Directory where tile .npy files saved
tile_dir =

; Names of .nd2 files for the imaging rounds. Leave empty if only using anchor.
;;DELETE
round =

; Name of the file for the anchor round. Leave empty if not using anchor.
;;DELETE
anchor =

; .nd2 or .npy indicating the data type of the raw data.
;DELETE
raw_extension = .nd2

; If .npy raw_extension, this is the name of the .json file in *input_dir* which contains the metadata
; required extracted from the initial .nd2 files.
; I.e. it contains the output of *coppafish/utils/nd2/save_metadata*:
;
; - `xy_pos` - `List [n_tiles x 2]`. xy position of tiles in pixels.
;
; - `pixel_microns` - `float`. xy pixel size in microns.
;
; - `pixel_microns_z` - `float`. z pixel size in microns.
;
; - `sizes` - dict with fov (`t`), channels (`c`), y, x, z-planes (`z`) dimensions.
;DELETE
raw_metadata =

; csv file giving the approximate raw intensity for each dye with each camera/laser combination.
; If not set, the file *coppafish/setup/dye_camera_laser_raw_intensity.csv* file will be used.
dye_camera_laser =

; Text file which contains the codes indicating which dye to expect on each round for each gene.
code_book =

; Text file saved in *tile_dir* containing `extract['scale']` and `extract['scale_anchor']` values used to create
; the tile .npy files in the *tile_dir*. If the second value is 0, it means `extract['scale_anchor']` has not
; been calculated yet.
;
; If the extract step of the pipeline is re-run with `extract['scale']` or `extract['scale_anchor']` different
; to values saved here, an error will be raised.
;DELETE
scale = scale

; npz file in *output_dir* containing coords of spots found in find_spots step as well as spot_no and isolated_spots.
; After each tile is completed, information will be saved to this file.
; If file does not exist, it will be saved after first tile of find_spots step.
;DELETE
spot_details_info = spot_details_info

; npy file in output directory indicating average spot shape.
; If deconvolution required and file does not exist, will be computed automatically in extract step.
; (this is psf before tapering and scaled to fill uint16 range).
psf = psf

; npy file in *output_dir* indicating average shape in omp coefficient image.
; It only indicates the sign of the coefficient i.e. only contains -1, 0, 1.
; If file does not exist, it is computed from the coefficient images of all genes of the central tile.
omp_spot_shape = omp_spot_shape

; npy file in *output_dir* containing information about spots found in omp step.
; After each tile is completed, information will be saved to this file.
; If file does not exist, it will be saved after first tile of OMP step.
omp_spot_info = omp_spot_info

; npz file in *output_dir* containing gene coefficients for all spots found in omp step.
; After each tile is completed, information will be saved to this file.
; If file does not exist, it will be saved after first tile of OMP step.
omp_spot_coef = omp_spot_coef

; npz file in *output_dir* where stitched DAPI image is saved. If it does not exist,
; it will be saved if `basic_info['dapi_channel']` is not `None`.
; Leave blank to not save stitched anchor
big_dapi_image = dapi_image

; npz file in *output_dir* where stitched image of `ref_round`/`ref_channel` is saved.
; If it does not exist, it will be saved.
; Leave blank to not save stitched anchor
big_anchor_image = anchor_image

; csv files in *output_dir* where plotting information for pciSeq will be saved.
; First file is name where *omp* method output will be saved.
; Second file is name where *ref_spots* method output will be saved.
; If files don't exist, they will be created when the function *coppafish/export_to_pciseq* is run.
pciseq = pciseq_omp, pciseq_anchor, pciseq_prob

fluorescent_bead_path =

pre_seq =

; location of npy file containing (n_channels x n_dyes) ndarray to use as the initial bleed matrix. If empty, uses 
; a hardcoded matrix, located in the ``call_reference_spots.py`` script.
initial_bleed_matrix =


[basic_info]
; The *basic_info* section indicates information required throughout the pipeline.

; Round that is the anchor
anchor_round =

; Channel in anchor round used as reference and to build coordinate system on. Usually channel with most spots.
; Leave blank if anchor not used.
anchor_channel =

; Channel in anchor round that contains *DAPI* images. This does not have to be in `use_channels`
; as anchor round is dealt with separately. Leave blank if no *DAPI*.
dapi_channel =


; Channels in imaging rounds to use throughout pipeline. Leave blank to use all.
use_channels =

; Imaging rounds to use throughout pipeline. Leave blank to use all.
use_rounds =

;will delete soon
use_anchor = True

; z planes used to make tile .npy files. Leave blank to use all.
; If 2 values provided, all z-planes between and including the values given will be used.
use_z =

; Tiles used throughout pipeline. Leave blank to use all.
; For an experiment where the tiles are arranged in a 4 x 3 (ny x nx) grid, tile indices are indicated as below:
;
; | 2  | 1  | 0  |
;
; | 5  | 4  | 3  |
;
; | 8  | 7  | 6  |
;
; | 11 | 10 | 9  |
use_tiles =

; Dyes to use when when assigning spots to genes. Leave blank to use all.
use_dyes =

; Name of dyes used in correct order. So for gene with code `360...`,
; gene appears with `dye_names[3]` in round 0, `dye_names[6]` in round 1, `dye_names[0]` in round 2 etc.
; If left blank, then assumes each channel corresponds to a different dye i.e. code 0 in code_book = channel 0.
; For quad_cam data, this needs to be specified.
dye_names =

; This is added onto every tile (except DAPI) when it is saved and
; removed from every tile when loaded. Required so we can have negative pixel values when save to .npy as uint16.
tile_pixel_value_shift = 15000

is_3d = True

channel_camera =

channel_laser =

ref_round =

ref_channel =

ignore_first_z_plane = True

software_version = 0.0.0

revision_hash = 


[scale]
; The parameters specify how to filter raw images and compute the scale factors to save the extracted images as 
; `np.uint16`.

; Each filtered image is multiplied by scale. This is because
; the image is saved as uint16 so to gain information from the decimal points,
; should multiply image so max pixel number is in the 10,000s (less than 65,536).
; Leave empty to auto-detect using `scale_norm`.
scale =

; If `scale` not given, `scale = scale_norm/max(scale_image)`.
; Where `scale_image` is the `n_channels x n_y x n_x x n_z` image belonging to the
; central tile (saved as `nb.extract_debug.scale_tile`) of round 0 after filtering and smoothing.
;
; Must be less than `np.iinfo(np.uint16).max - config['basic_info']['tile_pixel_value_shift']`
; which is typically $65535 - 15000 = 50535$.
scale_norm = 35000

; Analogous to `scale` but have different normalisation for anchor round/anchor channel as not
; used in final spot_colors.
; Leave empty to auto-detect using `scale_norm`.
scale_anchor =

; Radius of averaging filter to do smoothing of filtered image.
; Provide two numbers to do 2D smoothing and three numbers to do 3D smoothing.
; Typical *2D*: `2, 2`. Typical *3D*: `1, 1, 2`.
; Recommended use is in *3D* only as it incorporates information between z-planes which
; filtering with difference of hanning kernels does not.
;
; Size of `r_smooth` has big influence on time taken for smoothing.
; For a `2048 x 2048 x 50` image:
;
; * `r_smooth = 1, 1, 2`: 2.8 seconds
;
; * `r_smooth = 2, 2, 2`: 8.5 seconds
;
; Leave empty to do no smoothing.
r_smooth =

; Filtering is done with a 2D difference of hanning filter with inner radius `r1` within which it is positive
; and outer radius `r2` so annulus between `r1` and `r2` is negative.
; Should be approx radius of spot. Typical = 3.
;
; For `r1 = 3` and `r2 = 6`, a `2048 x 2048 x 50` image took 4.1s.
; For `2 <= r1 <= 5` and `r2` double this, the time taken seemed to be constant.
;
; Leave blank to auto detect using `r1_auto_microns micron`.
r1 =

; Filtering is done with a 2D difference of hanning filter with inner radius `r1` within which it is positive
; and outer radius `r2` so annulus between `r1` and `r2` is negative.
; Should be approx radius of spot. Typical = 6.
; Leave blank to set to twice `r1`.
r2 =

; If `r1` not specified, will convert to units of pixels from this micron value.
r1_auto_microns = 0.5


[extract]
; The *extract* section contains parameters which specify how to save the untiltered, raw microscope images to produce
; the .npy or .zarr files saved to `file_names['tile_dir']` in the 'raw' subfolder.

; The filetype to use when saving the extracted results. The options are .npy and .zarr.
file_type = .zarr

; Time to wait in seconds for raw data to come in before crashing.
; Assumes first round is already in the `file_names['input_dir']`
; Want this to be large so can run pipeline while collecting data.
wait_time = 21600

; whether or not we have a dapi image in each round
continuous_dapi = False


[filter]
; Here we specify filtering parameters used to filter raw, extracted images which are then re-saved in a new location 
; after extract.

; Filtering for DAPI images is a tophat with r_dapi radius.
; Should be approx radius of object of interest. Typical = 48.
; Leave blank to auto detect using `r_dapi_auto_microns`.
r_dapi =

; If `r_dapi` not specified. Will convert to units of pixels from this micron value. Typical = 8.0.
; If both this and `r_dapi` left blank, DAPI image will not be filtered and no .npy file saved.
; Instead DAPI will be loaded directly from raw data and then stitched.
r_dapi_auto_microns =

; `nb.extract.auto_thresh[t,r,c]` is default threshold to find spots on tile t, round r, channel c.
; Value is set to `auto_thresh_multiplier * median(abs(image))` where
; `image` is the image produced for tile t, round r, channel c in the extract step of the pipeline and saved to
; `file_names['tile_dir']`.
auto_thresh_multiplier = 10

; For 3D pipeline, whether to perform wiener deconvolution before hanning filtering.
deconvolve = False

; Need to detect spots to determine point spread function (psf) used in the wiener deconvolution.
; Only relevant if `deconvolve == True`.
; To detect spot, pixel needs to be above dilation with this radius in xy plane.
psf_detect_radius_xy = 2

; Need to detect spots to determine point spread function (psf) used in the wiener deconvolution.
; Only relevant if `deconvolve == True`.
; To detect spot, pixel needs to be above dilation with this radius in z direction.
psf_detect_radius_z = 2

; Spots contribute to `psf` if they are above this intensity.
; If not given, will be computed the same as `auto_thresh`
; i.e. `median(image) + auto_thresh_multiplier*median(abs(image-median(image)))`.
; Note that for raw data, `median(image)` is not zero hence the difference.
psf_intensity_thresh =

; Spots contribute to `psf` if more than `psf_isolation_dist` from nearest spot.
psf_isolation_dist = 10

; Need this many isolated spots to determine `psf`.
psf_min_spots = 300

; Diameter of psf in y, x, z direction (in units of [xy_pixels, xy_pixels, z_pixels]).
psf_shape = 181, 181, 19

; `psf` is assumed to be radially symmetric within each z-plane so assume all values within annulus of this size
; (in xy_pixels) to be the same.
psf_annulus_width = 1.4

; Constant used to compute wiener filter from `psf`.
wiener_constant = 50000

; When applying the wiener filter, we pad the raw image to median value
; linearly with this many pixels at end of each dimension.
wiener_pad_shape = 20, 20, 3

; If the number of pixels that are clipped when saving as uint16 is more than `n_clip_warn`,
; a warning message will occur.
n_clip_warn = 1000

; If the number of pixels that are clipped when saving as uint16 is more than `n_clip_error` for
; `n_clip_error_images_thresh` images, the extract and filter step will be halted.
; If left blank, n_clip_error will be set to 1% of pixels of a single z-plane.
n_clip_error =

; If the number of pixels that are clipped when saving as uint16 is more than `n_clip_error` for
; `n_clip_error_images_thresh` images, the extract and filter step will be halted.
n_clip_error_images_thresh = 3

; number of rotations applied to each tile individually when extracted.
num_rotations = 1

; Leave blank to set to r1.
pre_seq_blur_radius =


[find_spots]
; The *find_spots* section contains parameters which specify how to convert the images produced in the extract section
; to point clouds.


; To be detected as a spot, a pixel needs to be above dilation with structuring element which is
; a square (`np.ones`) of width `2*radius_xy-1` in the xy plane.
radius_xy = 2

; To be detected as a spot, a pixel needs to be above dilation with structuring element which is
; cuboid (`np.ones`) with width `2*radius_z-1` in z direction. Must be more than 1 to be 3D.
radius_z = 2

; If number of spots detected on particular z-plane of an imaging round is greater than
; this, then will only select the `max_spots_2d` most intense spots on that z-plane.
; I.e. PCR works better if trying to fit fewer more intense spots.
; This only applies to imaging rounds and not ref_round/ref_channel as need lots of spots then.
; In 2D, allow more spots as only 1 z-plane
max_spots_2d = 1500

; Same as `max_spots_2d` for the 3D pipeline. In 3D, need to allow less spots on a z-plane as have many z-planes.
max_spots_3d = 500

; To determine if spots are isolated, filter image with annulus between `isolation_radius_inner` and `isolation_radius`.
; `isolation_radius_inner` should be approx the radius where intensity of spot crosses from positive to negative.
; It is in units of xy-pixels.
; This filtering will only be applied to spots detected in the ref_round/ref_channel.
isolation_radius_inner = 4

; Outer radius of annulus filtering kernel in xy direction in units of xy-pixels.
isolation_radius_xy = 14

; Outer radius of annulus filtering kernel in z direction in units of z-pixels.
isolation_radius_z = 1

; Spot is isolated if value of annular filtered image at spot location is below the `isolation_thresh` value.
; Leave blank to automatically determine value using `auto_isolation_thresh_multiplier`. multiplied by the threshold used
; to detect the spots i.e. the extract_auto_thresh value.
isolation_thresh =

; If `isolation_thresh` left blank, it will be set to
; `isolation_thresh = auto_isolation_thresh_multiplier * nb.extract.auto_thresh[:, r, c]`.
auto_isolation_thresh_multiplier = -0.2

; Used in *coppafish/find_spots/base/check_n_spots*
;
; A warning will be raised if for any tile, round, channel the number of spots detected is less than:
;
; `n_spots_warn = n_spots_warn_fraction * max_spots * nb.basic_info.nz`
;
; where `max_spots` is `max_spots_2d` if *2D* and `max_spots_3d` if *3D*.
n_spots_warn_fraction = 0.1

; Used in *coppafish/find_spots/base/check_n_spots*. An error is raised if any of the following are satisfied:
;
; * For any given channel, the number of spots found was less than `n_spots_warn` for at least
; the fraction `n_spots_error_fraction` of tiles/rounds.
;
; * For any given tile, the number of spots found was less than `n_spots_warn` for at least
; the fraction `n_spots_error_fraction` of rounds/channels.
;
; * For any given round, the number of spots found was less than `n_spots_warn` for at least
; the fraction `n_spots_error_fraction` of tiles/channels.
n_spots_error_fraction = 0.5


[stitch]
; The *stitch* section contains parameters which specify how the overlaps between neighbouring tiles are found.


; Expected fractional overlap between tiles. Used to get initial shift search if not provided.
expected_overlap = 0.1

; If `shift_south_min/max` and/or `shift_west_min/max` not given,
; the initial shift search will have `auto_n_shifts` either side of the expected
; shift given the `expected_overlap` with step given by `shift_step`.
; First value gives $n_{shifts}$ in direction of overlap (y for south, x for west).
; Second value gives $n_{shifts}$ in other direction (x for south, y for west).
; Third value gives $n_{shifts}$ in z.
auto_n_shifts = 20, 20, 1

; Can manually specify initial shifts.
; Exhaustive search will include all shifts between min and max with step given by `shift_step`.
; Each entry should be a list of 3 values: [y, x, z].
; Typical: `-1900, -100, -2`
shift_north_min =

; Can manually specify initial shifts.
; Exhaustive search will include all shifts between min and max with step given by `shift_step`.
; Each entry should be a list of 3 values: [y, x, z].
; Typical: `-1700, 100, 2`
shift_north_max =

; Can manually specify initial shifts.
; Exhaustive search will include all shifts between min and max with step given by `shift_step`.
; Each entry should be a list of 3 values: [y, x, z].
; Typical: `-100, -1900, -2`
shift_east_min =

; Can manually specify initial shifts. Shift range will run between min to max
; with step given by `shift_step`. Each entry should be a list of 3 values: [y, x, z].
; Typical: `100, -1700, 2`
shift_east_max =

; Step size to use in y, x, z when finding shift between tiles.
shift_step = 5, 5, 3

; If shift in initial search range has score which does not exceed `shift_score_thresh`,
; then range will be extrapolated with same step by `shift_widen` values in y, x, z direction.
shift_widen = 10, 10, 1

; The range of shifts searched over will continue to be increased according to `shift_widen` until
; the shift range in the y, x, z direction reaches `shift_max_range`.
; If a good shift is still not found, a warning will be printed.
shift_max_range = 300, 300, 10

; Basically the distance in yx pixels below which neighbours are a good match.
neighb_dist_thresh = 2

; A shift between tiles must have a number of close neighbours exceeding this.
; If not given, it will be worked using the `shift_score_thresh` parameters below
; using the function *coppafish/stitch/shift/get_score_thresh*.
shift_score_thresh =

; `shift_score_thresh` is set to `shift_score_thresh_multiplier` multiplied by the
; mean of scores of shifts a distance between
; `shift_score_thresh_min_dist` and `shift_score_thresh_max_dist` from the best shift.
shift_score_thresh_multiplier = 2

; `shift_score_thresh` is set to `shift_score_thresh_multiplier` multiplied by the
; mean of scores of shifts a distance between
; `shift_score_thresh_min_dist` and `shift_score_thresh_max_dist` from the best shift.
shift_score_thresh_min_dist = 11

; `shift_score_thresh` is set to `shift_score_thresh_multiplier` multiplied by the
; mean of scores of shifts a distance between
; `shift_score_thresh_min_dist` and `shift_score_thresh_max_dist` from the best shift.
shift_score_thresh_max_dist = 20

; 3D data is converted into `np.ceil(nz / nz_collapse)` 2D slices for exhaustive shift search to quicken it up.
; I.e. this is the maximum number of z-planes to be collapsed to a 2D slice when searching for the best shift.
nz_collapse = 30

; Used in *coppafish/stitch/check_shifts/check_shifts_stitch*
; If more than this fraction of `shifts` found between neighbouring tiles
; have `score < score_thresh`, an error will be raised.
n_shifts_error_fraction = 0.5

; When saving stitched images, all pixels with absolute value less than or equal to
; `save_image_zero_thresh` will be set to 0.
; This helps reduce size of the .npz files and does not lose any important information.
save_image_zero_thresh = 20

; whether to flip the tile ordering in the y direction
flip_y = False

; whether to flip the tile ordering in the x direction
flip_x = False


[register]
; The *register* section contains parameters which specify how the affine transforms from the ref_round/ref_channel
; to each imaging round/channel are found from the shifts found in the *register_initial* section.


; Basically the distance in yx pixels below which neighbours are a good match. PCR updates transforms
; by minimising distances between neighbours which are closer than this.
neighb_dist_thresh_2d = 3

; The same as `neighb_dist_thresh_2d` but in 3D, we use a larger distance because the size of a
; z-pixel is greater than a xy pixel.
neighb_dist_thresh_3d = 10

subvols = 5, 8, 8

box_size = 12, 300, 300

pearson_r_thresh = 0.5

residual_thresh = 5

bead_radii = 10, 11, 12

icp_min_spots = 100

icp_max_iter = 50

round_registration_channel =

sobel = True

; CPU threads to use when computing background scale factors. Applicable when [basic_info][use_preseq] is true. When 
; empty, uses all available CPU threads.
n_background_scale_threads = 


[call_spots]
; The *call_spots* section contains parameters which determine how the `bleed_matrix` and `gene_efficiency`
; are computed, as well as how a gene is assigned to each spot found on the ref_round/ref_channel.


; `bleed_matrix_method` can only be `single` or `separate`.
; `single`: a single bleed matrix is produced for all rounds.
; `separate`: a different bleed matrix is made for each round.
bleed_matrix_method = single

; In `scaled_k_means` part of `bleed_matrix` calculation, a mean vector for each dye is computed from
; all spots with a dot product to that mean greater than this.
bleed_matrix_score_thresh = 0

; If less than this many vectors are assigned to a dye cluster in the `scaled_k_means` part of `bleed_matrix`
; calculation, the expected code for that dye will be set to 0 for all color channels i.e. bleed matrix
; computation will have failed.
bleed_matrix_min_cluster_size = 10

; Maximum number of iterations allowed in the `scaled_k_means` part of `bleed_matrix` calculation.
bleed_matrix_n_iter = 100

; If `True`, the `scaled_k_means` calculation will be performed twice.
; The second time starting with the output of the first and with `score_thresh` for cluster `i`
; set to the median of the scores assigned to cluster `i` in the first run.
;
; This limits the influence of bad spots to the bleed matrix.
bleed_matrix_anneal = True

; Shift to apply to weighting of each background vector to limit boost of weak spots.
; The weighting of round r for the fitting of the background vector for channel c is
; `1 / (spot_color[r, c] + background_weight_shift)` so `background_weight_shift` ensures
; this does not go to infinity for small `spot_color[r, c]`.
; Typical `spot_color[r, c]` is 1 for intense spot so `background_weight_shift` is small fraction of this.
; Leave blank to set to median absolute intensity of all pixels on the mid z-plane of the central tile.
background_weight_shift =

; When calculating the `dot_product_score`, this is the small shift to apply when normalising `spot_colors`
; to ensure don't divide by zero.
; Value is for a single round and is multiplied by `sqrt(n_rounds_used)` when computing `dot_product_score`.
; Expected norm of a spot_color for a single round is 1 so `dp_norm_shift` is a small fraction of this.
; Leave blank to set to median L2 norm for a single round of all pixels on the mid z-plane of the central tile.
dp_norm_shift =

; Minimum possible value of `dp_norm_shift` and `background_weight_shift`.
norm_shift_min = 0.001

; Maximum possible value of `dp_norm_shift` and `background_weight_shift`.
norm_shift_max = 0.5

; `dp_norm_shift` and `background_weight_shift` will be rounded to nearest `norm_shift_precision`.
norm_shift_precision = 0.01

; If number of spots assigned to a gene less than or equal to this, `gene_efficiency[g]=1` for all rounds.
gene_efficiency_min_spots = 25

gene_efficiency_score_thresh = 0.7

; Spots used to compute `gene_efficiency` must have `dot_product_score` greater than `gene_efficiency_score_thresh`,
; difference to second best score greater than `gene_efficiency_score_diff_thresh` and intensity greater than
; `gene_efficiency_intensity_thresh`.
gene_efficiency_intensity_thresh = 0

gene_efficiency_intensity_thresh_percentile = 50

; When computing the dot product score, $\Delta_{s0g}$ between spot $s$ and gene $g$,
; rounds/channels with background already fit contribute less. The larger $\alpha$, the lower the contribution.
;
; Set $\alpha = 0$ to use the normal dot-product with no weighting.
alpha = 120

; Constant used in weighting factor when computing dot product score, $\Delta_{s0g}$ between spot $s$ and gene $g$.
beta = 1


[omp]
; The *omp* section contains parameters which are use to carry out orthogonal matching pursuit (omp) on every pixel,
; as well as how to convert the results of this to spot locations.


; Can specify z-planes to find spots on
; If 2 values provided, all z-planes between and including the values given will be used.
use_z =

; If `False`, gene coefficients are found through omp with normal least squares fitting.
; If `True`, gene coefficients are found through omp with weighted least squares fitting
; with rounds/channels which already containing genes contributing less.
weight_coef_fit = False

; To save time in `call_spots_omp`, coefficients only found for pixels with intensity
; of absolute `spot_colors` greater than `initial_intensity_thresh`.
; Leave blank to set to determine using `initial_intensity_thresh_auto_param`
; It is also clamped between the `initial_intensity_thresh_min` and `initial_intensity_thresh_max`.
initial_intensity_thresh =

; If `initial_intensity_thresh` not given, it will be set to the
; `initial_intensity_thresh_percentile` percentile
; of the absolute intensity of all pixels on the mid z-plane of the central tile.
; It uses `nb.call_spots.abs_intensity_percentile`
initial_intensity_thresh_percentile = 25

; Min allowed value of `initial_intensity_thresh`.
initial_intensity_thresh_min = 0.001

; Max allowed value of `initial_intensity_thresh`.
initial_intensity_thresh_max = 0.2

; `initial_intensity_thresh` will be rounded to nearest `initial_intensity_precision` if not given.
initial_intensity_precision = 0.001

; The maximum number of genes that can be assigned to each pixel i.e. number of iterations of omp.
max_genes = 30

; Pixels only have coefficient found for a gene if that gene has absolute `dot_product_score` greater than this
; i.e. this is the stopping criterion for the OMP.
dp_thresh = 0.225

; When computing the dot product score, $\Delta_{sig}$ between spot $s$ and gene $g$ on iteration $i$ of *OMP*,
; rounds/channels with genes already fit to them, contribute less. The larger $\alpha$, the lower the contribution.
;
; Set $\alpha = 0$ to use the normal dot-product with no weighting.
alpha = 120

; Constant used in weighting factor when computing dot product score, $\Delta_{sig}$ between spot $s$ and gene $g$ on
; iteration $i$ of *OMP*.
beta = 1

; Only save spots with number of positive coefficient neighbours greater than `initial_pos_neighbour_thresh`.
; Leave blank to determine using `initial_pos_neighbour_thresh_param`.
; It is also clipped between `initial_pos_neighbour_thresh_min` and `initial_pos_neighbour_thresh_max`.
initial_pos_neighbour_thresh =

; If `initial_pos_neighbour_thresh` not given, it is set to `initial_pos_neighbour_thresh_param` multiplied
; by number of positive values in nb.omp.spot_shape i.e. with `initial_pos_neighbour_thresh_param = 0.1`,
; it is set to 10% of the max value.
initial_pos_neighbour_thresh_param = 0.1

; Min allowed value of `initial_pos_neighbour_thresh`.
initial_pos_neighbour_thresh_min = 4

; Max allowed value of `initial_pos_neighbour_thresh`.
initial_pos_neighbour_thresh_max = 40

; To detect spot in coefficient image of each gene, pixel needs to be above dilation with structuring element which is
; a square (`np.ones`) of width `2*radius_xy-1` in the xy plane.
radius_xy = 3

; To detect spot in coefficient image of each gene, pixel needs to be above dilation with structuring element which is
; cuboid (`np.ones`) with width `2*radius_z-1` in z direction. Must be more than 1 to be 3D.
radius_z = 2

; spot_shape specifies the neighbourhood about each spot in which we count coefficients which contribute to score.
; It is either given through `file_names['omp_spot_shape']` or computed using the below parameters with shape prefix.
; Maximum Y, X, Z size of spot_shape.
; Will be cropped if there are zeros at the extremities.
shape_max_size = 27, 27, 9

; For spot to be used to find `spot_shape`, it must have this many pixels
; around it on the same z-plane that have a positive coefficient.
; If 3D, also, require 1 positive pixel on each neighbouring plane (i.e. 2 is added to this value).
shape_pos_neighbour_thresh = 9

; Spots are isolated if nearest neighbour (across all genes) is further away than this.
; Only isolated spots are used to find `spot_shape`.
shape_isolation_dist = 10

; If the mean absolute coefficient sign is less than this in a region near a spot,
; we set the expected coefficient in `spot_shape` to be 0.
; Max mean absolute coefficient sign is 1 so must be less than this.
shape_sign_thresh = 0.15


[thresholds]
; The *thresholds* section contains the thresholds used to determine which spots pass a quality thresholding process
; such that we consider their gene assignments legitimate.


; Final accepted reference and OMP spots both require `intensity > thresholds[intensity]`.
; If not given, will be set to same value as `nb.call_spots.gene_efficiency_intensity_thresh`.
; intensity for a really intense spot is about 1 so `intensity_thresh` should be less than this.
intensity =

; Final accepted spots are those which pass quality_threshold which is
; `nb.ref_spots.score > thresholds[score_ref]` and `nb.ref_spots.intensity > intensity_thresh`.
; quality_threshold requires score computed with *coppafish/call_spots/dot_prodduct/dot_product_score* to exceed this.
; Max score is 1 so must be below this.
score_ref = 0.25

; Final accepted OMP spots are those which pass quality_threshold which is:
; `score > thresholds[score_omp]` and `intensity > thresholds[intensity]`. `score` is given by:
; `score = (score_omp_multiplier * n_neighbours_pos + n_neighbours_neg) /
;   (score_omp_multiplier * n_neighbours_pos_max + n_neighbours_neg_max)`
; Max score is 1 so `score_thresh` should be less than this.
;
; 0.15 if more concerned for missed spots than false positives.
score_omp = 0.263

score_prob = 0.7

; Final accepted OMP spots are those which pass quality_threshold which is:
; `score > thresholds[score_omp]` and `intensity > thresholds[intensity]`. `score` is given by:
; `score = (score_omp_multiplier * n_neighbours_pos + n_neighbours_neg) /
;   (score_omp_multiplier * n_neighbours_pos_max + n_neighbours_neg_max)`
;
; 0.45 if more concerned for missed spots than false positives.
score_omp_multiplier = 0.95


[reg_to_anchor_info]
; Information relevant to the separate round registration


; Positions of bottom left corner of squares that we are comparing
full_anchor_y0 = 0
full_anchor_x0 = 0
partial_anchor_y0 = 0
partial_anchor_x0 = 0

; Side length of squares that we are comparing
side_length =
